#include <stdio.h>

#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

int main() {
    int available[MAX_RESOURCES];
    int max_claim[MAX_PROCESSES][MAX_RESOURCES];
    int allocation[MAX_PROCESSES][MAX_RESOURCES];
    int need[MAX_PROCESSES][MAX_RESOURCES];

    int n_processes, n_resources;

    // Input number of processes and resources
    printf("Enter the number of processes: ");
    scanf("%d", &n_processes);

    printf("Enter the number of resources: ");
    scanf("%d", &n_resources);

    // Input available resources
    printf("Enter the available resources:\n");
    for (int i = 0; i < n_resources; i++) {
        scanf("%d", &available[i]);
    }

    // Input maximum claim matrix
    printf("Enter the maximum claim matrix:\n");
    for (int i = 0; i < n_processes; i++) {
        printf("For process %d: ", i + 1);
        for (int j = 0; j < n_resources; j++) {
            scanf("%d", &max_claim[i][j]);
        }
    }

    // Input allocation matrix and calculate need matrix
    printf("Enter the allocation matrix:\n");
    for (int i = 0; i < n_processes; i++) {
        printf("For process %d: ", i + 1);
        for (int j = 0; j < n_resources; j++) {
            scanf("%d", &allocation[i][j]);
            need[i][j] = max_claim[i][j] - allocation[i][j];
        }
    }

    // Safety algorithm
    int work[MAX_RESOURCES];
    int finish[MAX_PROCESSES] = {0};
    int sequence[MAX_PROCESSES];
    int count = 0;

    // Initialize work array
    for (int i = 0; i < n_resources; i++) {
        work[i] = available[i];
    }

    while (count < n_processes) {
        int found = 0;

        // Find a process that can be executed
        for (int i = 0; i < n_processes; i++) {
            if (finish[i] == 0) {
                int j;
                for (j = 0; j < n_resources; j++) {
                    if (need[i][j] > work[j]) {
                        break;
                    }
                }

                if (j == n_resources) {
                    // Process i can be executed
                    for (int k = 0; k < n_resources; k++) {
                        work[k] += allocation[i][k];
                    }

                    sequence[count] = i + 1;
                    finish[i] = 1;
                    count++;
                    found = 1;
                }
            }
        }

        if (!found) {
            // If no process can be executed, the system is in an unsafe state
            printf("The system is in an unsafe state.\n");
            return 0;
        }
    }

    // If all processes can be executed, the system is in a safe state
    printf("Safe sequence: ");
    for (int i = 0; i < n_processes; i++) {
        printf("%d ", sequence[i]);
    }
    printf("\nThe system is in a safe state.\n");

    return 0;
}
